TestCase subclass: #SistemaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'sistFacturacion-Test'!!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 13:00'!test10ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasInternacionalAPaisesNoRegistrados	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaInternacionalConDestino: 'Canada'.		valorEsperado := 500 "tarifa inicial" + 7 "costo por llamadas a paises no registrados".	factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 12:54'!test03ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasLocalesEnDiaHabil	| sistema valorEsperado usuario factura|	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Martes' aLas: 15.		factura := usuario obtenerFactura: 'Septiembre'.		valorEsperado := 500 "tarifa inicial" + (0.20 "costo por minuto dia habil de 8 a 20" * 12 "cant minutos").	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests'!test02ElValorDeLaFacturaSinCargosEsElInicial	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.	valorEsperado := 500.		factura := usuario obtenerFactura: 'Septiembre'.		self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 13:01'!test12ElValorDeLaFacturaCambiaTodosLosMeses	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 100.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaLocalDe: 3 MinutosElDia: 'Viernes' aLas: 10.	usuario crearLlamadaLocalDe: 40 MinutosElDia: 'Miercoles' aLas: 22.	usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Sabado' aLas: 15.		valorEsperado := 100 "tarifa inicial" + (3 * 0.2) "costo por minuto dia habil de 8 a 20"  + (40 * 0.1) "costo por minuto dia habil de 20 a 7" + (12 * 0.1) "costo por minuto fin de semana".	factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).		usuario nuevoMes: 'Octubre'.	valorEsperado := 100.	factura := usuario obtenerFactura: 'Octubre'.		self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/17/2021 16:50'!test01ElUsuarioSeCreaCorrectamente	| sistema |	sistema := Sistema new.	sistema registrarUsuario: 'Diego' conPlan: 250.	self shouldnt: [ sistema obtenerUsuario: 'Diego' ] raise: EseUsuarioNoEstaRegistradoError.! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 13:00'!test07ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasNacionalADistanciaMayorA30	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaNacionalADestino: 'Pilar' aKms: 40.		valorEsperado := 500 "tarifa inicial" + 4 "costo por distancia mayor a 30".	factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 12:57'!test04ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasLocalesEnFinDeSemana	| sistema valorEsperado usuario factura|	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Sabado' aLas: 15.		factura := usuario obtenerFactura: 'Septiembre'.		valorEsperado := 500 "tarifa inicial" + (0.1 "costo por minuto fin de semana" * 12 "cant minutos").	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa ).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 12:59'!test06ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasLocalesEnDiaHabilDespuesDe20hs	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Viernes' aLas: 22.		valorEsperado := 500 "tarifa inicial" + (0.1 "costo por minuto dia habil de 20 a 7" * 12 "cant minutos").		factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 13:00'!test08ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasNacionalADistanciaMenorA30	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaNacionalADestino: 'Moreno' aKms: 20.		valorEsperado := 500 "tarifa inicial" + 2 "costo por distancia menor a 30".	factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 13:00'!test11ElValorDeLaFacturaEsElEsperadoConVariosCargos	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 100.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaLocalDe: 3 MinutosElDia: 'Viernes' aLas: 10.	usuario crearLlamadaLocalDe: 40 MinutosElDia: 'Miercoles' aLas: 22.	usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Sabado' aLas: 15.	usuario crearLlamadaInternacionalConDestino: 'Canada'.	usuario crearLlamadaNacionalADestino: 'Pilar' aKms: 40.	usuario crearLlamadaInternacionalConDestino: 'Francia'.		valorEsperado := 100 "tarifa inicial" + (3 * 0.2) "costo por minuto dia habil de 8 a 20"  + (40 * 0.1) "costo por minuto dia habil de 20 a 7" + (12 * 0.1) "costo por minuto fin de semana" + 7 "costo por llamadas a paises no registrados" + 4 "costo por distancia mayor a 30" + 5 "costo por llamadas a paises registrados".	factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 12:59'!test05ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasLocalesEnFinDeSemanaSinImportarHorario	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Sabado' aLas: 22.		valorEsperado := 500 "tarifa inicial" + (0.1 "costo por minuto fin de semana" * 12 "cant minutos").		factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).		usuario crearLlamadaLocalDe: 12 MinutosElDia: 'Sabado' aLas: 10.			valorEsperado := 501.2 "tarifa con cargo anterior" + (0.1 "costo por minuto dia habil de 8 a 20" * 12 "cant minutos").	self assert: valorEsperado equals: (factura tarifa) .! !!SistemaTest methodsFor: 'tests' stamp: 'CandelaSerrano 12/18/2021 13:00'!test09ElValorDeLaFacturaEsElEsperadoConCargoDeLlamadasInternacionalAPaisesRegistrados	| sistema valorEsperado usuario factura |	sistema := Sistema new.		sistema registrarUsuario: 'Diego' conPlan: 500.	usuario := sistema obtenerUsuario: 'Diego'.	usuario nuevoMes: 'Septiembre'.		usuario crearLlamadaInternacionalConDestino: 'Francia'.		valorEsperado := 500 "tarifa inicial" + 5 "costo por llamadas a paises registrados".	factura := usuario obtenerFactura: 'Septiembre'.	self assert: 'Diego' equals: (usuario nombre).	self assert: valorEsperado equals: (factura tarifa).! !